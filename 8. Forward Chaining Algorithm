# Facts: The knowledge base containing information about known truths
facts = {
    'a': True,
    'b': True,
    'c': False
}

# Rules: Each rule is a tuple (conclusion, [conditions])
rules = [
    ('d', ['a', 'b']),   # d is true if a and b are true
    ('e', ['b', 'c']),   # e is true if b and c are true
    ('f', ['d', 'e'])    # f is true if d and e are true
]

# Forward Chaining Algorithm
def forward_chaining(facts, rules, goal):
    inferred = set(k for k, v in facts.items() if v)  # Start with facts that are True
    new_inferred = set(inferred)

    while new_inferred:
        current_inferred = set()
        for head, body in rules:
            # If rule conclusion is not already inferred
            # and all conditions are in inferred set
            if head not in inferred and all(fact in inferred for fact in body):
                current_inferred.add(head)

        if not current_inferred:
            break  # No new facts inferred; stop

        inferred.update(current_inferred)
        new_inferred = current_inferred

    return goal in inferred

# -----------------------
# Example: Try to infer 'f'
# -----------------------
goal = 'f'

if forward_chaining(facts, rules, goal):
    print(f"The goal '{goal}' can be achieved.")
else:
    print(f"The goal '{goal}' cannot be achieved.")
